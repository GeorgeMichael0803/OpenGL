#version 330 // OpenGL version 3.3

in vec3 retFragPos;         // Fragment position in world space
in vec3 retNormal;          // Fragment normal
in vec2 retTexCoord;        // Texture coordinates
in vec3 retViewDirection;   // View direction

out vec4 FragColor;         // Output fragment color

struct Material {
    float specularStrength;   // Specular strength from the UI
    sampler2D diffuseTexture;
    sampler2D specularTexture;
};

struct Light {
    vec3 position;
    vec3 color;
    vec3 ambientColor;
    vec3 diffuseColor;
    vec3 specularColor; // Default specular color
};

uniform Material material;
#define NUM_LIGHTS 1
uniform Light light[NUM_LIGHTS];

// Uniforms for toggling the behavior
uniform bool useOverride;          // Use override specular color
uniform vec3 overrideSpecularColor; // Override color
uniform bool useColorByPosition;   // Toggle for "Color By Position"

void main()
{
    vec4 finalColor = vec4(0);

    // ColorByPosition logic
    if (useColorByPosition) {
        // Map world position to RGB tints
        vec3 tintColor = vec3(
            abs(retFragPos.x),  // Red tint based on X position
            abs(retFragPos.y),  // Green tint based on Y position
            abs(retFragPos.z)   // Blue tint based on Z position
        );

        // Clamp tint color to [0, 1]
        tintColor = clamp(tintColor, 0.0, 1.0);

        FragColor = vec4(tintColor, 1.0); // Output the tint color
        return; // Skip further lighting calculations
    }

    // Default diffuse lighting logic
    for (int i = 0; i < NUM_LIGHTS; i++) {
        // Calculate lambertian strength
        vec3 lightDir = normalize(light[i].position - retFragPos);
        float lambertianStrength = max(dot(lightDir, retNormal), 0.0);

        // Use the override specular color if enabled
        vec3 specularColor = useOverride ? overrideSpecularColor : light[i].specularColor;

        // Calculate specular strength
        vec3 refl = reflect(-lightDir, retNormal);
        float specularStrength = pow(max(dot(retViewDirection, refl), 0.0), material.specularStrength);

        // Ambient, diffuse, and specular calculations
        vec3 ambient = texture(material.diffuseTexture, retTexCoord).rgb * light[i].ambientColor / NUM_LIGHTS;
        vec3 lambertian = lambertianStrength * texture(material.diffuseTexture, retTexCoord).rgb * light[i].diffuseColor;
        vec3 specular = specularStrength * specularColor;

        finalColor += vec4(ambient + lambertian + specular, 1.0f);
    }
    FragColor = finalColor;
}
