#version 330 // OpenGL version 3.3

in vec3 retFragPos;         // Fragment position
in vec3 retNormal;          // Fragment normal
in vec2 retTexCoord;        // Texture coordinates
in vec3 retViewDirection;   // View Direction

out vec4 FragColor;         // Output Fragment Color

struct Material
{
    float specularStrength;   // Specular strength from the UI
    sampler2D diffuseTexture;
    sampler2D specularTexture;
};

struct Light
{
    vec3 position;
    vec3 color;
    vec3 ambientColor;
    vec3 diffuseColor;
    vec3 specularColor; // Slider-adjusted specular color
};

uniform Material material;
#define NUM_LIGHTS 1
uniform Light light[NUM_LIGHTS];

void main()
{
    vec4 finalColor = vec4(0);
    for (int i = 0; i < NUM_LIGHTS; i++)
    {
        // Calculate lambertian strength
        vec3 lightDir = normalize(light[i].position - retFragPos);
        float lambertianStrength = max(dot(lightDir, retNormal), 0.0);

        // Calculate specular strength
        vec3 refl = reflect(-lightDir, retNormal);
        float specularStrength = pow(max(dot(retViewDirection, refl), 0.0), material.specularStrength);

        // Ambient, diffuse, and specular calculations
        vec3 ambient = texture(material.diffuseTexture, retTexCoord).rgb * light[i].ambientColor / NUM_LIGHTS;
        vec3 lambertian = lambertianStrength * texture(material.diffuseTexture, retTexCoord).rgb * light[i].diffuseColor;
        vec3 specular = specularStrength * light[i].specularColor;

        finalColor += vec4(ambient + lambertian + specular, 1.0f);
    }
    FragColor = finalColor;
}
